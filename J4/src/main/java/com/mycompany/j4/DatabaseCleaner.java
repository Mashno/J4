/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.mycompany.j4;

/**
 *
 * @author –í–ª–∞–¥–∏—Å–ª–∞–≤
 */
import java.sql.*;

public class DatabaseCleaner {

    public static void clearAllData() {
    Connection conn = null;
    try {
        conn = DatabaseConnection.getConnection();
        conn.setAutoCommit(false);

        // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞–ª–æ—á–µ–∫
        try (PreparedStatement stmt = conn.prepareStatement("DELETE FROM MagicStick")) {
            stmt.executeUpdate();
        }

        // –£–¥–∞–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–æ—Å—Ç–∞–≤–æ–∫ –∏ —Å–∞–º–∏—Ö –ø–æ—Å—Ç–∞–≤–æ–∫
        try (PreparedStatement stmtDetails = conn.prepareStatement("DELETE FROM DeliveryDetails");
             PreparedStatement stmtDelivery = conn.prepareStatement("DELETE FROM Delivery")) {
            stmtDetails.executeUpdate();
            stmtDelivery.executeUpdate();
        }

        // –û–±–Ω—É–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ Wood –∏ Core
        try (PreparedStatement stmtWood = conn.prepareStatement("UPDATE Wood SET amount = 0");
             PreparedStatement stmtCore = conn.prepareStatement("UPDATE Core SET amount = 0")) {
            stmtWood.executeUpdate();
            stmtCore.executeUpdate();
        }

        // –°–±—Ä–æ—Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        resetSequence(conn, "MagicStick", "id");
        resetSequence(conn, "Delivery", "id");
        resetSequence(conn, "DeliveryDetails", "id");

        conn.commit();
        System.out.println("üßπ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. ID –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –∑–∞–Ω–æ–≤–æ —Å 1.");

    } catch (SQLException e) {
        System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:");
        e.printStackTrace();
        try {
            if (conn != null) conn.rollback();
        } catch (SQLException ex2) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:");
            ex2.printStackTrace();
        }
    } finally {
        try {
            if (conn != null) conn.close();
        } catch (SQLException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:");
            e.printStackTrace();
        }
    }
}

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private static void resetSequence(Connection conn, String table, String column) throws SQLException {
        String seqName = getSequenceName(conn, table, column);
        if (seqName != null) {
            String sql = "ALTER SEQUENCE " + seqName + " RESTART WITH 1";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.executeUpdate();
            }
        }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è SERIAL-—Å—Ç–æ–ª–±—Ü–∞
    private static String getSequenceName(Connection conn, String table, String column) throws SQLException {
        String sql = "SELECT pg_get_serial_sequence(?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, table);
            pstmt.setString(2, column);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getString(1);
            }
        }
        return null;
    }
}